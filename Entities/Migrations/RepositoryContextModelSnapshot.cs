// <auto-generated />
using System;
using Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Entities.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    partial class RepositoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Entities.Models.Chassi", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdImage")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdLivery")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdManufacturer")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdImage");

                    b.HasIndex("IdLivery");

                    b.HasIndex("IdManufacturer");

                    b.ToTable("Chassi");
                });

            modelBuilder.Entity("Entities.Models.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdImage")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdImage");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("Entities.Models.DNQ", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("IdGpResult")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdTypeDnq")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("IdGpResult");

                    b.HasIndex("IdTypeDnq");

                    b.ToTable("DNQ");
                });

            modelBuilder.Entity("Entities.Models.DescriptionGPResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("IdGpResult")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("IdGpResult");

                    b.ToTable("DescriptionGPResult");
                });

            modelBuilder.Entity("Entities.Models.Engine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdImage")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdManufacturer")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdImage");

                    b.HasIndex("IdManufacturer");

                    b.ToTable("Engine");
                });

            modelBuilder.Entity("Entities.Models.Fail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("IdGpResult")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdTypeFail")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("IdGpResult");

                    b.HasIndex("IdTypeFail");

                    b.ToTable("Fail");
                });

            modelBuilder.Entity("Entities.Models.FastLap", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float>("AverageSpeed")
                        .HasColumnType("real");

                    b.Property<Guid>("IdGpResult")
                        .HasColumnType("uuid");

                    b.Property<int>("Lap")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.HasIndex("IdGpResult");

                    b.ToTable("FastLap");
                });

            modelBuilder.Entity("Entities.Models.Fine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("IdGpResult")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("IdGpResult");

                    b.ToTable("Fine");
                });

            modelBuilder.Entity("Entities.Models.GP", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("IdImage")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdTrackСonfiguration")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Num")
                        .HasColumnType("integer");

                    b.Property<int>("NumInSeason")
                        .HasColumnType("integer");

                    b.Property<float>("PercentDistance")
                        .HasColumnType("real");

                    b.Property<string>("Weather")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdImage");

                    b.HasIndex("IdTrackСonfiguration");

                    b.ToTable("GP");
                });

            modelBuilder.Entity("Entities.Models.GPResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float>("AverageSpeed")
                        .HasColumnType("real");

                    b.Property<Guid>("IdParticipant")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdTypeFinish")
                        .HasColumnType("uuid");

                    b.Property<int>("Lap")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.HasIndex("IdParticipant");

                    b.HasIndex("IdTypeFinish");

                    b.ToTable("GPResult");
                });

            modelBuilder.Entity("Entities.Models.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("Entities.Models.LeaderLap", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("First")
                        .HasColumnType("integer");

                    b.Property<Guid>("IdGpResult")
                        .HasColumnType("uuid");

                    b.Property<int>("Last")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IdGpResult");

                    b.ToTable("LeaderLap");
                });

            modelBuilder.Entity("Entities.Models.Livery", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Livery");
                });

            modelBuilder.Entity("Entities.Models.Manufacturer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdCountry")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdImage")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdCountry");

                    b.HasIndex("IdImage");

                    b.ToTable("Manufacturer");
                });

            modelBuilder.Entity("Entities.Models.Participant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdChassi")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdEngine")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdGp")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdRacer")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdTeam")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdTyre")
                        .HasColumnType("uuid");

                    b.Property<string>("Num")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdChassi");

                    b.HasIndex("IdEngine");

                    b.HasIndex("IdGp");

                    b.HasIndex("IdRacer");

                    b.HasIndex("IdTeam");

                    b.HasIndex("IdTyre");

                    b.ToTable("Participant");
                });

            modelBuilder.Entity("Entities.Models.Pit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdGpResult")
                        .HasColumnType("uuid");

                    b.Property<int>("Lap")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.HasIndex("IdGpResult");

                    b.ToTable("Pit");
                });

            modelBuilder.Entity("Entities.Models.Qualification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float>("AverageSpeed")
                        .HasColumnType("real");

                    b.Property<Guid>("IdParticipant")
                        .HasColumnType("uuid");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.HasIndex("IdParticipant");

                    b.ToTable("Qualification");
                });

            modelBuilder.Entity("Entities.Models.Racer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Born")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("BornIn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Dead")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeadIn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("IdCountry")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdImage")
                        .HasColumnType("uuid");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TextData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdCountry");

                    b.HasIndex("IdImage");

                    b.ToTable("Racer");
                });

            modelBuilder.Entity("Entities.Models.Season", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdImage")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdTypeCalculate")
                        .HasColumnType("uuid");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IdImage");

                    b.HasIndex("IdTypeCalculate");

                    b.ToTable("Season");
                });

            modelBuilder.Entity("Entities.Models.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdCountry")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdImage")
                        .HasColumnType("uuid");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdCountry");

                    b.HasIndex("IdImage");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("Entities.Models.TeamName", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdSeasonFinish")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdSeasonStart")
                        .HasColumnType("uuid");

                    b.Property<string>("LongName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdSeasonFinish");

                    b.HasIndex("IdSeasonStart");

                    b.ToTable("TeamName");
                });

            modelBuilder.Entity("Entities.Models.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdCountry")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdImage")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdCountry");

                    b.HasIndex("IdImage");

                    b.ToTable("Track");
                });

            modelBuilder.Entity("Entities.Models.TrackСonfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdImageGpConfiguration")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdTrack")
                        .HasColumnType("uuid");

                    b.Property<float>("Length")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdImageGpConfiguration");

                    b.HasIndex("IdTrack");

                    b.ToTable("TrackСonfiguration");
                });

            modelBuilder.Entity("Entities.Models.TypeCalculate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TypeCalculate");
                });

            modelBuilder.Entity("Entities.Models.TypeDNQ", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TypeDNQ");
                });

            modelBuilder.Entity("Entities.Models.TypeFail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TypeFail");
                });

            modelBuilder.Entity("Entities.Models.TypeFinish", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TypeFinish");
                });

            modelBuilder.Entity("Entities.Models.Tyre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdImage")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdManufacturer")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdImage");

                    b.HasIndex("IdManufacturer");

                    b.ToTable("Tyre");
                });

            modelBuilder.Entity("Entities.Models.Chassi", b =>
                {
                    b.HasOne("Entities.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("IdImage")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Livery", "Livery")
                        .WithMany()
                        .HasForeignKey("IdLivery")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("IdManufacturer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Country", b =>
                {
                    b.HasOne("Entities.Models.Image", "Image")
                        .WithMany("Countries")
                        .HasForeignKey("IdImage")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.DNQ", b =>
                {
                    b.HasOne("Entities.Models.GPResult", "Result")
                        .WithMany()
                        .HasForeignKey("IdGpResult")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.TypeDNQ", "TypeDnq")
                        .WithMany()
                        .HasForeignKey("IdTypeDnq")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.DescriptionGPResult", b =>
                {
                    b.HasOne("Entities.Models.GPResult", "Result")
                        .WithMany()
                        .HasForeignKey("IdGpResult")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Engine", b =>
                {
                    b.HasOne("Entities.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("IdImage")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("IdManufacturer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Fail", b =>
                {
                    b.HasOne("Entities.Models.GPResult", "Result")
                        .WithMany()
                        .HasForeignKey("IdGpResult")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.TypeFail", "TFail")
                        .WithMany()
                        .HasForeignKey("IdTypeFail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.FastLap", b =>
                {
                    b.HasOne("Entities.Models.GPResult", "Result")
                        .WithMany()
                        .HasForeignKey("IdGpResult")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Fine", b =>
                {
                    b.HasOne("Entities.Models.GPResult", "Result")
                        .WithMany()
                        .HasForeignKey("IdGpResult")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.GP", b =>
                {
                    b.HasOne("Entities.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("IdImage")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.TrackСonfiguration", "TrackСonfiguration")
                        .WithMany()
                        .HasForeignKey("IdTrackСonfiguration")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.GPResult", b =>
                {
                    b.HasOne("Entities.Models.Participant", "Participant")
                        .WithMany()
                        .HasForeignKey("IdParticipant")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.TypeFinish", "TypeFinish")
                        .WithMany()
                        .HasForeignKey("IdTypeFinish")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.LeaderLap", b =>
                {
                    b.HasOne("Entities.Models.GPResult", "Result")
                        .WithMany()
                        .HasForeignKey("IdGpResult")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Manufacturer", b =>
                {
                    b.HasOne("Entities.Models.Country", "Countr")
                        .WithMany()
                        .HasForeignKey("IdCountry")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("IdImage")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Participant", b =>
                {
                    b.HasOne("Entities.Models.Chassi", "Chassi")
                        .WithMany()
                        .HasForeignKey("IdChassi")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Engine", "Engine")
                        .WithMany()
                        .HasForeignKey("IdEngine")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.GP", "Gp")
                        .WithMany()
                        .HasForeignKey("IdGp")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Racer", "Racer")
                        .WithMany()
                        .HasForeignKey("IdRacer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("IdTeam")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Tyre", "Tyre")
                        .WithMany()
                        .HasForeignKey("IdTyre")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Pit", b =>
                {
                    b.HasOne("Entities.Models.GPResult", "Result")
                        .WithMany()
                        .HasForeignKey("IdGpResult")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Qualification", b =>
                {
                    b.HasOne("Entities.Models.Participant", "Participant")
                        .WithMany()
                        .HasForeignKey("IdParticipant")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Racer", b =>
                {
                    b.HasOne("Entities.Models.Country", "Countr")
                        .WithMany()
                        .HasForeignKey("IdCountry")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("IdImage")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Season", b =>
                {
                    b.HasOne("Entities.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("IdImage")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.TypeCalculate", "TypeCalculat")
                        .WithMany()
                        .HasForeignKey("IdTypeCalculate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Team", b =>
                {
                    b.HasOne("Entities.Models.Country", "Cournt")
                        .WithMany()
                        .HasForeignKey("IdCountry")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("IdImage")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.TeamName", b =>
                {
                    b.HasOne("Entities.Models.Season", "SeasonFinish")
                        .WithMany()
                        .HasForeignKey("IdSeasonFinish")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Season", "SeasonStart")
                        .WithMany()
                        .HasForeignKey("IdSeasonStart")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Track", b =>
                {
                    b.HasOne("Entities.Models.Country", "Countr")
                        .WithMany()
                        .HasForeignKey("IdCountry")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("IdImage")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.TrackСonfiguration", b =>
                {
                    b.HasOne("Entities.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("IdImageGpConfiguration")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Track", "Track")
                        .WithMany()
                        .HasForeignKey("IdTrack")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Tyre", b =>
                {
                    b.HasOne("Entities.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("IdImage")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("IdManufacturer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
